import streamlit as st
from snowflake.snowpark import Session
from snowflake.snowpark.functions import call_function
from datetime import date
import os
from dotenv import load_dotenv

# --- Load environment variables ---
load_dotenv()

connection_parameters = {
    "account": os.getenv("SF_ACCOUNT"),
    "user": os.getenv("SF_USER"),
    "password": os.getenv("SF_PASSWORD"),
    "role": os.getenv("SF_ROLE"),
    "warehouse": os.getenv("SF_WAREHOUSE"),
    "database": os.getenv("SF_DATABASE"),
    "schema": os.getenv("SF_SCHEMA")
}

# --- Connect to Snowflake ---
try:
    session = Session.builder.configs(connection_parameters).create()
except Exception as e:
    st.error(f"‚ùå Snowflake connection failed: {e}")
    st.stop()

# --- UI Layout ---
st.set_page_config(page_title="Sales Insights Dashboard", layout="wide")
st.title("üìä Sales Insights Dashboard with AI + Download")

# --- KPI Metrics ---
st.subheader("üìå Key Performance Indicators")
df_kpi = session.sql("""
    SELECT
        COUNT(DISTINCT order_id) AS total_orders,
        COUNT(DISTINCT customer_id) AS total_customers,
        SUM(quantity * unit_price) AS total_revenue
    FROM orders
""").to_pandas().iloc[0]

col1, col2, col3 = st.columns(3)
col1.metric("Total Orders", df_kpi["TOTAL_ORDERS"])
col2.metric("Total Customers", df_kpi["TOTAL_CUSTOMERS"])
col3.metric("Total Revenue", f"‚Çπ{df_kpi['TOTAL_REVENUE']:,.2f}")

# --- Line Chart ---
st.subheader("üìà Sales Trend Over Time")
df_trend = session.sql("""
    SELECT order_date, SUM(quantity * unit_price) AS daily_sales
    FROM orders
    GROUP BY order_date
    ORDER BY order_date
""")
st.line_chart(df_trend.to_pandas().set_index("ORDER_DATE"))

# --- Tabs ---
st.subheader("üßæ Detailed Insights")
tab1, tab2 = st.tabs(["Top Customers", "Top Reps"])

with tab1:
    df1 = session.sql("""
        SELECT c.customer_name, SUM(o.quantity * o.unit_price) AS total_spent
        FROM orders o
        JOIN customers c ON o.customer_id = c.customer_id
        GROUP BY c.customer_name
        ORDER BY total_spent DESC
        LIMIT 5
    """)
    st.dataframe(df1.to_pandas())

with tab2:
    df2 = session.sql("""
        SELECT s.rep_name, SUM(o.quantity * o.unit_price) AS total_sales
        FROM orders o
        JOIN sales_reps s ON o.rep_id = s.rep_id
        GROUP BY s.rep_name
        ORDER BY total_sales DESC
        LIMIT 5
    """)
    st.dataframe(df2.to_pandas())

# --- Download Orders CSV ---
st.subheader("‚¨áÔ∏è Download Orders Data")
df_download = session.sql("SELECT * FROM orders").to_pandas()
st.download_button(
    label="Download Orders CSV",
    data=df_download.to_csv(index=False),
    file_name="orders.csv",
    mime="text/csv"
)

# --- AI Assistant ---
st.subheader("ü§ñ Ask the AI Assistant")
user_question = st.text_area("Ask a sales-related question:", placeholder="e.g. Top product in July?")

if user_question.strip():
    try:
        # Securely call SNOWFLAKE.CORTEX.COMPLETE with parameter
        result_df = session.sql("SELECT SNOWFLAKE.CORTEX.COMPLETE(?) AS result", [user_question])
        response = result_df.to_pandas().iloc[0]["RESULT"]
        st.success(response)
    except Exception as e:
        st.error(f"‚ùå Cortex AI failed: {e}")

# --- Raw Data Viewer ---
with st.expander("üìÑ Show Raw Data"):
    df_raw = session.sql("""
        SELECT o.*, p.product_name, c.customer_name
        FROM orders o
        JOIN products p ON o.product_id = p.product_id
        JOIN customers c ON o.customer_id = c.customer_id
    """)
    st.dataframe(df_raw.to_pandas())
